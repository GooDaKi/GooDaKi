***    	get 	/api/main/{userid} 		*UserController:getUserInfo(userid)
*** 	post 	/api/main/searchuser 		*UserController:searchUser(query)
*** 	post 	/api/main/register 		*UserController:register(userinfo)
*** 	post 	/api/main/login 		*UserController:login(username,password)
*** 	post 	/api/logout 			*UserController:logout(id)

*** 	get 	/api/main/portfolio/{id} 	*UserController:getPortfolio(id,yourid)
*** 	put 	/api/main/editportfolio 	*UserController:editPortfolio(Portfolioinfo)

*** 	get 	/api/main/chunk/{id} 		*ChunkStub:userGetChunk(id)
*** 	post 	/api/main/chunk 		*ChunkStub:userCreateChunk(info)
*** 	put 	/api/main/chunk 		*ChunkStub:userEditChunk(info)
*** 	post 	/api/main/chunk/search 		*SearchStub:userSearchChunk(query)
*** 	delete 	/api/main/chunk/{id} 		*ChunkStub:userDeleteChunk(id)

*** 	get 	/api/main/subject/{id} 		*SubjectStub:userGetSubject(id)
*** 	post 	/api/main/subject 		*SubjectStub:userCreateSubject(info)
*** 	put 	/api/main/subject 		*SubjectStub:userEditSubject(info)
*** 	post 	/api/main/subject/search 	*SearchStub:userSearchSubject(query)
*** 	delete 	/api/main/subject/{id} 		*SubjectStub:userDeleteSubject(id)
*** 	get 	/api/main/subjectsyllabus/{id} 	*SubjectStub:userGetSubjectSyllabus(id)

*** 	get 	/api/main/course/{id} 		*CourseStub:userGetCourse(id)
*** 	post 	/api/main/course 		*CourseStub:userCreateCourse(info)
*** 	put 	/api/main/course 		*CourseStub:userEditCourse(info)
*** 	post 	/api/main/course/search 	*SearchStub:userSearchCourse(query)
*** 	delete 	/api/main/course/{id} 		*CourseStub:userDeleteCourse(id)
*** 	get 	/api/main/coursesyllabus/{id} 	*CourseStub:userGetCourseSyllabus(id)

*** 	post 	/api/main/career 		*CareerStub:userCreateCareer(info)
*** 	put 	/api/main/career 		*CareerStub:userEditCareer(info)
*** 	post 	/api/main/career/search 	*SearchStub:userSearchCareer(query)
*** 	get 	/api/main/careersyllabus/{id} 	*CareerStub:userGetCareerSyllabus(id)

*** 	get 	/api/main/search 		*SearchStub:userSearch(query)

:User 
{
    "userid": string,
    "username": string,
    "password": string,
    "portfolio": string,
    "description": string

}

:Portfolio 
{
    "Portfolioid": string,
    "firstname": string,
    "lastname": string,
    "birthday": string,
    "education": string,
    "createdchunk": [chunkid],
    "createdsubject": [subjectid],
    "createdcourse": [courseid],
    "takencourse": [courseid],
    "takingcourse": takingcourse
}

#takingcourse=[{'course':courseid, [{'subject' : subjectorder, [{'chunk' : [chunkorder] }] }] }]
takingcourse=[{'course':courseid, 'subject' : subjectorder, 'chunk' : chunkorder}]

post /api/main/searchuser
    post-body:
    {
        "query": queryString
    }
    return [User]

get /api/main/portfolio/{id}
    return portfolio

put /api/main/editportfolio
    post-body:
    {
        portfolio info
    }

get /api/main/chunk/{id}
    return:
    Chunk

post /api/main/chunk
    post-body:
    chunk-info: Chunk #without id
    
    return:
    if success:
        return 200
    otherwise:
        httpCode & { "error": reasonString } 

post /api/main/chunk/search 	
    post-body:
    {
        "tag": [tags],
        "author": [authorNames],
        "query": queryString,
        "start-date": date,
        "end-date": date
    }

    return:
    [Chunk]

delete /api/main/chunk/{id} 
    if success:
        return 200
    otherwise:
        httpCode & { "error": resonString }	


get /api/main/subject/{id} 
    return:
    Subject	

post /api/main/subject 
    post-body:
    course-info: Subject #without id

    return:
    if success:
    return 200
    otherwise:
    httpCode & { "error": reasonString }

put /api/main/subject 
    post-body:
    course-info: Subject 

    return:
    if success:
    return 200
    otherwise:
    httpCode & { "error": reasonString }
		
post /api/main/subject/search
    post-body:
    {
        "tag": [tags],
        "author": [authorNames],
        "query": queryString,
        "start-date": date,
        "end-date": date
    }

    return:
    array-of-subjects: [Subject] 
	
delete /api/main/subject/{id} 
    if success:
        return 200
    otherwise:
        httpCode & { "error": resonString }
		
get /api/main/subjectsyllabus/{id} 
    return:
    Subject

----same for course and career----

post /api/main/career/search 
    post-body:
    {
        "tag": [tags],
        "query": queryString,
        "start-date": date,
        "end-date": date
    }	
                        
post /api/main/search 
    post-body:
    {
        "tag": [tags],
        "author": [authorNames],
        "query": queryString,
        "start-date": date,
        "end-date": date
    }

    return:
    [Subject],[Career],[Course],[Chunk]

ps.pleas see other api-doc